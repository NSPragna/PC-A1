#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int main()
{
   
    int RandomPos(int elements1);
   unsigned short i, j, m, n,p;
   float sp1,sp2;
    int a[10][10],b[10][10],d[10][10];
   
    srand(time(0));

    printf("Enter the row dimension of the matrix: ");
    scanf("%hu", &m);

    printf("Enter the column dimension of the matrix: ");
    scanf("%hu", &n);
    printf("Enter the column dimension of the matrix: ");
    scanf("%hu", &p);
    printf("Enter the sparsity of the matrix1: ");
    scanf("%f", &sp1);
   printf("Enter the sparsity of the matrix2: ");
    scanf("%f",&sp2);
    
    for( i = 0; i < m;i++) {
    for(int j = 0; j < n;j++) {
            a[i][j]=0;
    }
    }
    for( i = 0; i < m;i++) {
    for(int j = 0; j < n;j++) {
            b[i][j]=0;
    }
    }
    for(i=0;i<m;i++){
        for(int j=0;j<p;j++){
            d[i][j]=0;
        }
    }
    int nonZeroVals=round((m*n)-(m*n*sp1));
    int elmnts=m*n;
  
    int nonZeroVals1=round((n*p)-(n*p*sp2));
    int elmnts1=m*n;
    
    int usedPos[100];
    int counter=-1;
    
    int usedPos1[100];
    int counter1=-1;
   
  for(int k=1;k<=nonZeroVals;k++)
    {
        int newPos=generate_random(0,elmnts-1);
         //printf("\nNew Pos : %d",newPos);
       
        while(isPos_AlredyDone(usedPos,counter,newPos) == 0){
            newPos=generate_random(0,elmnts-1);
          // printf("\nNew Pos : %d",newPos);
        }
       
        usedPos[++counter]= newPos;
        //printf("\nFinal New Pos : %d",newPos);
       
         int posVal= generate_random(1,100);
        while (posVal==0){
            posVal=(int)(rand()*100);
        }
       
        a[newPos/n][newPos%n]=posVal;
       
       
    }
    printArray(a,m,n);
    for(int k1=1;k1<=nonZeroVals1;k1++)
    {
        int newPos1=generate_random(0,elmnts1-1);
         //printf("\nNew Pos : %d",newPos);
       
        while(isPos_AlredyDone(usedPos1,counter1,newPos1) == 0){
            newPos1=generate_random(0,elmnts1-1);
          // printf("\nNew Pos : %d",newPos);
        }
       
        usedPos1[++counter1]= newPos1;
        //printf("\nFinal New Pos : %d",newPos);
       
         int posVal1= generate_random(1,100);
           while (posVal1==0){
            posVal1=(int)(rand()*100);
        }
       
        b[newPos1/p][newPos1%p]=posVal1;
       
    }
 printArray(b,n,p);
 for(i = 0; i < m; ++i){
        for(int j = 0; j < p; ++j){
            for(int k = 0; k < n; ++k)
            {
                d[i][j] += a[i][k] * b[k][j];
            }
        }
 }
  printArray(d,m,p);
            
    return 0;
}

int isPos_AlredyDone(int usedPos[],int counter,int newPos){
   
    for (int i=0;i<=counter;i++){
        //printf("Compared %d with %d",usedPos[i],newPos);
        if (usedPos[i] == newPos){
            //printf("\n%d... there in Array and counter is %d",newPos,counter);
            return 0;
        }
    }
    //printf("\n%d...not yet there in Array and counter is %d",newPos,counter);
    return 1;
}

int  generate_random(int l, int r) { //this will generate random number in range l and r
   int i;
   
      int rand_num = (rand() % (r - l + 1)) + l;
    return rand_num;
}

void printArray(int dispArray[10][10],int rows,int cols){
    printf("\n\n\n");
    for (int i=0;i<rows;i++){
        for(int j=0;j<cols;j++){
            printf("%d\t",dispArray[i][j]);
        }
        printf("\n");
    }
    return;
}
